[{"/home/duc/udemy-rosbridge-course/src/index.js":"1","/home/duc/udemy-rosbridge-course/src/App.js":"2","/home/duc/udemy-rosbridge-course/src/reportWebVitals.js":"3","/home/duc/udemy-rosbridge-course/src/components/Footer.jsx":"4","/home/duc/udemy-rosbridge-course/src/components/Body.jsx":"5","/home/duc/udemy-rosbridge-course/src/components/Header.jsx":"6","/home/duc/udemy-rosbridge-course/src/components/About.jsx":"7","/home/duc/udemy-rosbridge-course/src/components/Home.jsx":"8","/home/duc/udemy-rosbridge-course/src/components/Connection.jsx":"9","/home/duc/udemy-rosbridge-course/src/components/Teleoperation.jsx":"10","/home/duc/udemy-rosbridge-course/src/components/RobotState.jsx":"11","/home/duc/udemy-rosbridge-course/src/components/Map.jsx":"12","/home/duc/udemy-rosbridge-course/src/scripts/config.js":"13"},{"size":544,"mtime":1749011197655,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1749026330077,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1749011197655,"results":"17","hashOfConfig":"15"},{"size":302,"mtime":1749023507894,"results":"18","hashOfConfig":"15"},{"size":564,"mtime":1749026330077,"results":"19","hashOfConfig":"15"},{"size":697,"mtime":1749023598874,"results":"20","hashOfConfig":"15"},{"size":324,"mtime":1749011197651,"results":"21","hashOfConfig":"15"},{"size":1047,"mtime":1749025723523,"results":"22","hashOfConfig":"15"},{"size":1759,"mtime":1749011197651,"results":"23","hashOfConfig":"15"},{"size":2820,"mtime":1749027162482,"results":"24","hashOfConfig":"15"},{"size":3936,"mtime":1749011197651,"results":"25","hashOfConfig":"15"},{"size":1782,"mtime":1749027974231,"results":"26","hashOfConfig":"15"},{"size":256,"mtime":1749011430004,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1y7oxu2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/duc/udemy-rosbridge-course/src/index.js",[],["57","58"],"/home/duc/udemy-rosbridge-course/src/App.js",[],"/home/duc/udemy-rosbridge-course/src/reportWebVitals.js",[],"/home/duc/udemy-rosbridge-course/src/components/Footer.jsx",[],"/home/duc/udemy-rosbridge-course/src/components/Body.jsx",[],"/home/duc/udemy-rosbridge-course/src/components/Header.jsx",[],"/home/duc/udemy-rosbridge-course/src/components/About.jsx",[],"/home/duc/udemy-rosbridge-course/src/components/Home.jsx",["59","60"],"/home/duc/udemy-rosbridge-course/src/components/Connection.jsx",["61"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          className=\"text-center m-3\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/duc/udemy-rosbridge-course/src/components/Teleoperation.jsx",["62"],"/home/duc/udemy-rosbridge-course/src/components/RobotState.jsx",["63","64","65"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Position</h4>\n            <p className=\"mt-0\">x: {this.state.x}</p>\n            <p className=\"mt-0\">y: {this.state.y}</p>\n            <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Velocities</h4>\n            <p className=\"mt-0\">\n              Linear Velocity: {this.state.linear_velocity}\n            </p>\n            <p className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/duc/udemy-rosbridge-course/src/components/Map.jsx",["66","67"],"/home/duc/udemy-rosbridge-course/src/scripts/config.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":18},{"ruleId":"72","severity":1,"message":"76","line":6,"column":31,"nodeType":"74","messageId":"75","endLine":6,"endColumn":37},{"ruleId":"77","severity":1,"message":"78","line":13,"column":5,"nodeType":"79","endLine":13,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":16,"column":5,"nodeType":"79","endLine":16,"endColumn":15},{"ruleId":"72","severity":1,"message":"80","line":2,"column":20,"nodeType":"74","messageId":"75","endLine":2,"endColumn":29},{"ruleId":"72","severity":1,"message":"76","line":2,"column":31,"nodeType":"74","messageId":"75","endLine":2,"endColumn":37},{"ruleId":"77","severity":1,"message":"78","line":22,"column":5,"nodeType":"79","endLine":22,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":17,"column":5,"nodeType":"79","endLine":17,"endColumn":15},{"ruleId":"72","severity":1,"message":"81","line":52,"column":9,"nodeType":"74","messageId":"75","endLine":52,"endColumn":18},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Connection' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Container' is defined but never used.","'navClient' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
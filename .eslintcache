[{"/home/duc/react-ui-ros/src/index.js":"1","/home/duc/react-ui-ros/src/App.js":"2","/home/duc/react-ui-ros/src/reportWebVitals.js":"3","/home/duc/react-ui-ros/src/components/Footer.jsx":"4","/home/duc/react-ui-ros/src/components/Header.jsx":"5","/home/duc/react-ui-ros/src/components/Body.jsx":"6","/home/duc/react-ui-ros/src/components/HomePage.jsx":"7","/home/duc/react-ui-ros/src/components/About.jsx":"8","/home/duc/react-ui-ros/src/components/UserPage.jsx":"9","/home/duc/react-ui-ros/src/components/Home.jsx":"10","/home/duc/react-ui-ros/src/components/Connection.jsx":"11","/home/duc/react-ui-ros/src/components/Map.jsx":"12","/home/duc/react-ui-ros/src/components/Teleoperation.jsx":"13","/home/duc/react-ui-ros/src/components/RobotState.jsx":"14","/home/duc/react-ui-ros/src/scripts/config.js":"15"},{"size":544,"mtime":1750393036614,"results":"16","hashOfConfig":"17"},{"size":378,"mtime":1750393036606,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1750393036614,"results":"19","hashOfConfig":"17"},{"size":302,"mtime":1750393036610,"results":"20","hashOfConfig":"17"},{"size":697,"mtime":1750393036610,"results":"21","hashOfConfig":"17"},{"size":758,"mtime":1750393036610,"results":"22","hashOfConfig":"17"},{"size":809,"mtime":1750393036610,"results":"23","hashOfConfig":"17"},{"size":324,"mtime":1750393036610,"results":"24","hashOfConfig":"17"},{"size":253,"mtime":1750393036614,"results":"25","hashOfConfig":"17"},{"size":1047,"mtime":1750393036610,"results":"26","hashOfConfig":"17"},{"size":1759,"mtime":1750393036610,"results":"27","hashOfConfig":"17"},{"size":1782,"mtime":1750393036610,"results":"28","hashOfConfig":"17"},{"size":3761,"mtime":1750471766561,"results":"29","hashOfConfig":"17"},{"size":3936,"mtime":1750393036614,"results":"30","hashOfConfig":"17"},{"size":260,"mtime":1750472249521,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"6kr63r",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/duc/react-ui-ros/src/index.js",[],["69","70"],"/home/duc/react-ui-ros/src/App.js",["71","72"],"import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Body from \"./components/Body\";\nimport \"./App.css\"; // Import global styles\n\nfunction App() {\n  return (\n    <div className=\"app-root\">\n      {/* <Header /> */}\n      <div className=\"app-body\">\n        <Body />\n      </div>\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nexport default App;\n","/home/duc/react-ui-ros/src/reportWebVitals.js",[],"/home/duc/react-ui-ros/src/components/Footer.jsx",[],"/home/duc/react-ui-ros/src/components/Header.jsx",[],"/home/duc/react-ui-ros/src/components/Body.jsx",[],"/home/duc/react-ui-ros/src/components/HomePage.jsx",[],"/home/duc/react-ui-ros/src/components/About.jsx",[],"/home/duc/react-ui-ros/src/components/UserPage.jsx",[],"/home/duc/react-ui-ros/src/components/Home.jsx",["73","74"],"import React, { Component } from \"react\";\nimport Connection from \"./Connection\";\nimport RobotState from \"./RobotState\";\nimport Teleoperation from \"./Teleoperation\";\nimport Map from \"./Map\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nclass Home extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Container fluid>\n          <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n          {/* Connection Status */}\n        <Row className=\"mt-4\">\n          {/* Left: Map */}\n          <Col xs={12} md={8}>\n            <Map />\n          </Col>\n          {/* Right: Joystick + RobotState */}\n          <Col\n            xs={12}\n            md={4}\n            style={{ minHeight: \"480px\", paddingRight: \"20px\" }}\n          >\n            <div className=\"d-flex flex-column align-items-end justify-content-between h-100\">\n              <Teleoperation />\n              <RobotState />\n            </div>\n          </Col>\n        </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/duc/react-ui-ros/src/components/Connection.jsx",["75"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          className=\"text-center m-3\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/duc/react-ui-ros/src/components/Map.jsx",["76","77"],"import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    const container = document.getElementById(\"nav_div\");\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: container.offsetWidth,\n      height: container.offsetHeight,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n        <div\n          id=\"nav_div\"\n          style={{\n            width: \"100%\",\n            height: \"300px\", // Dynamically scales width, limits height\n            border: \"1px solid #ccc\",\n            backgroundColor: \"#f5f5f5\",\n          }}\n        ></div>\n    );\n  }\n}\n\nexport default Map;\n","/home/duc/react-ui-ros/src/components/Teleoperation.jsx",["78"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n\n    this.state = {\n    ros: null,\n    publishing: false,\n    intervalId: null,\n    lastTwist: null,\n    };\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\nhandleMove(event) {\n  // Create twist\n  const linearSpeed = this.state.linearSpeed || 0.5;\n  const angularSpeed = this.state.angularSpeed || 0.5;\n\n  const twist = new window.ROSLIB.Message({\n    linear: {\n      x: (event.y / 50) * linearSpeed,\n      y: 0,\n      z: 0,\n    },\n    angular: {\n      x: 0,\n      y: 0,\n      z: (-event.x / 50) * angularSpeed,\n    },\n  });\n\n  const cmd_vel = new window.ROSLIB.Topic({\n    ros: this.state.ros,\n    name: Config.CMD_VEL_TOPIC,\n    messageType: \"geometry_msgs/Twist\",\n  });\n\n  // Publish immediately\n  cmd_vel.publish(twist);\n  this.setState({ lastTwist: twist });\n\n  // Start interval publisher if not running\n  if (!this.state.publishing) {\n    const intervalId = setInterval(() => {\n      if (this.state.lastTwist) {\n        cmd_vel.publish(this.state.lastTwist);\n      }\n    }, 100); // Send every 100ms\n\n    this.setState({ intervalId, publishing: true });\n  }\n}\n\n\n\nhandleStop() {\n  const cmd_vel = new window.ROSLIB.Topic({\n    ros: this.state.ros,\n    name: Config.CMD_VEL_TOPIC,\n    messageType: \"geometry_msgs/Twist\",\n  });\n\n  const stopTwist = new window.ROSLIB.Message({\n    linear: { x: 0, y: 0, z: 0 },\n    angular: { x: 0, y: 0, z: 0 },\n  });\n\n  cmd_vel.publish(stopTwist);\n\n  // Stop the loop\n  clearInterval(this.state.intervalId);\n  this.setState({\n    publishing: false,\n    intervalId: null,\n    lastTwist: null,\n  });\n\n  // Re-enable scroll\n  document.body.classList.remove(\"no-scroll\");\n}\n\n\nrender() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        padding: \"10px\",\n      }}\n    >\n      <Joystick\n        size={175}\n        baseColor=\"#EEEEEE\"\n        stickColor=\"#BBBBBB\"\n        move={(event) => {\n          this.handleMove(event);\n          document.body.classList.add(\"no-scroll\"); // Lock scroll only here\n        }}\n        stop={(event) => {\n          this.handleStop(event);\n          document.body.classList.remove(\"no-scroll\"); // Unlock scroll\n        }}\n      />\n    </div>\n  );\n}\n\n\n}\n\nexport default Teleoperation;\n","/home/duc/react-ui-ros/src/components/RobotState.jsx",["79","80","81"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Position</h4>\n            <p className=\"mt-0\">x: {this.state.x}</p>\n            <p className=\"mt-0\">y: {this.state.y}</p>\n            <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Velocities</h4>\n            <p className=\"mt-0\">\n              Linear Velocity: {this.state.linear_velocity}\n            </p>\n            <p className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/duc/react-ui-ros/src/scripts/config.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":14},{"ruleId":"86","severity":1,"message":"90","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":14},{"ruleId":"86","severity":1,"message":"91","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":18},{"ruleId":"86","severity":1,"message":"92","line":6,"column":31,"nodeType":"88","messageId":"89","endLine":6,"endColumn":37},{"ruleId":"93","severity":1,"message":"94","line":13,"column":5,"nodeType":"95","endLine":13,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":17,"column":5,"nodeType":"95","endLine":17,"endColumn":15},{"ruleId":"86","severity":1,"message":"96","line":52,"column":9,"nodeType":"88","messageId":"89","endLine":52,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":23,"column":5,"nodeType":"95","endLine":23,"endColumn":15},{"ruleId":"86","severity":1,"message":"97","line":2,"column":20,"nodeType":"88","messageId":"89","endLine":2,"endColumn":29},{"ruleId":"86","severity":1,"message":"92","line":2,"column":31,"nodeType":"88","messageId":"89","endLine":2,"endColumn":37},{"ruleId":"93","severity":1,"message":"94","line":22,"column":5,"nodeType":"95","endLine":22,"endColumn":15},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Footer' is defined but never used.","'Connection' is defined but never used.","'Button' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'navClient' is assigned a value but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]